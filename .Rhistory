library(readr)
visual_motion_2afc_fd <- read_csv("data/visual_motion_2afc_fd.csv")
View(visual_motion_2afc_fd)
# Calculate signed_contrast
visual_motion_2afc_fd$signed_contrast <- visual_motion_2afc_fd$coherence * visual_motion_2afc_fd$stimulus
# Replace 0 with -1 and 1 with 1 in the response column
visual_motion_2afc_fd$response <- ifelse(visual_motion_2afc_fd$response == 0, -1, 1)
# Round rt to 5 decimal places
visual_motion_2afc_fd$rt <- round(visual_motion_2afc_fd$rt, 5)
# Add stimrepeat column
visual_motion_2afc_fd$stimrepeat <- ifelse(visual_motion_2afc_fd$stimulus == lag(visual_motion_2afc_fd$prevstim), 1, 0)
# Add repeat column
visual_motion_2afc_fd$repeat <- ifelse(visual_motion_2afc_fd$response == lag(visual_motion_2afc_fd$prevresp), 1, 0)
# Add repeat column
visual_motion_2afc_fd$Repeat <- ifelse(visual_motion_2afc_fd$response == lag(visual_motion_2afc_fd$prevresp), 1, 0)
View(visual_motion_2afc_fd)
library(ggplot2)
library(gridExtra)
# Create a list to store the plots
plot_list <- list()
# Iterate over unique subjects and create a plot for each
for (subject_id in unique(visual_motion_2afc_fd$subj_idx)) {
subject_data <- subset(visual_motion_2afc_fd, subj_idx == subject_id)
# Create a histogram for RT distribution
p <- ggplot(subject_data, aes(x = rt)) +
geom_histogram(binwidth = 0.1, fill = "skyblue", color = "black") +
labs(title = paste("Subject", subject_id), x = "RT", y = "Frequency") +
theme_minimal()
# Add the plot to the list
plot_list[[length(plot_list) + 1]] <- p
}
# Create a grid of plots with 10 plots per page
grid_pages <- do.call(grid.arrange, c(plot_list, ncol = 2, nrow = 5))
View(visual_motion_2afc_fd)
# Create a grid of plots with 10 plots per page
grid_pages <- do.call(grid.arrange, c(plot_list, ncol = 4, nrow = 3))
num_plots <- length(plot_list)
ncols <- 4
nrows <- ceiling(num_plots / ncols)
# Create a grid of plots
grid_pages <- do.call(grid.arrange, c(plot_list, ncol = ncols, nrow = nrows))
# Display the grid of plots
grid_pages
# Calculate number of rows and columns required for each page
ncols <- 2
nrows <- 5
plots_per_page <- ncols * nrows
# Split the plot list into chunks for each page
plot_pages <- split(plot_list, ceiling(seq_along(plot_list) / plots_per_page))
# Create a list to store the grid pages
grid_pages_list <- lapply(plot_pages, function(page_plots) {
do.call(grid.arrange, c(page_plots, ncol = ncols, nrow = nrows))
})
# Display each page
for (i in seq_along(grid_pages_list)) {
cat(sprintf("Page %d\n", i))
print(grid_pages_list[[i]])
cat("\n")
}
# Calculate number of rows and columns required for each page
ncols <- 2
nrows <- 4
plots_per_page <- ncols * nrows
# Split the plot list into chunks for each page
plot_pages <- split(plot_list, ceiling(seq_along(plot_list) / plots_per_page))
# Create a list to store the grid pages
grid_pages_list <- lapply(plot_pages, function(page_plots) {
do.call(grid.arrange, c(page_plots, ncol = ncols, nrow = nrows))
})
# Display each page
for (i in seq_along(grid_pages_list)) {
cat(sprintf("Page %d\n", i))
print(grid_pages_list[[i]])
cat("\n")
}
nrows <- 3
plots_per_page <- ncols * nrows
# Split the plot list into chunks for each page
plot_pages <- split(plot_list, ceiling(seq_along(plot_list) / plots_per_page))
# Create a list to store the grid pages
grid_pages_list <- lapply(plot_pages, function(page_plots) {
do.call(grid.arrange, c(page_plots, ncol = ncols, nrow = nrows))
})
# Display each page
for (i in seq_along(grid_pages_list)) {
cat(sprintf("Page %d\n", i))
print(grid_pages_list[[i]])
cat("\n")
}
bar_plot_list <- list()
for (subject_id in unique(visual_motion_2afc_fd$subj_idx)) {
subject_data <- subset(visual_motion_2afc_fd, subj_idx == subject_id)
response_freq <- table(subject_data$response)
p <- ggplot(data = NULL, aes(x = factor(names(response_freq)), y = response_freq)) +
geom_bar(stat = "identity", fill = c("blue", "red")) +
labs(title = paste("Subject", subject_id), x = "Response", y = "Frequency") +
theme_minimal()
bar_plot_list[[length(bar_plot_list) + 1]] <- p
}
bar_plot_pages <- split(bar_plot_list, ceiling(seq_along(bar_plot_list) / plots_per_page))
# Create a list to store the grid pages
grid_pages_list <- lapply(bar_plot_pages, function(page_bar_plots) {
do.call(grid.arrange, c(page_bar_plots, ncol = ncols, nrow = nrows))
})
# Display each page
for (i in seq_along(grid_pages_list)) {
cat(sprintf("Page %d\n", i))
print(grid_pages_list[[i]])
cat("\n")
}
# Iterate over unique subjects and create a bar plot for each
for (subject_id in unique(visual_motion_2afc_fd$subj_idx)) {
subject_data <- subset(visual_motion_2afc_fd, subj_idx == subject_id)
response_freq <- table(factor(subject_data$response, levels = c(-1, 1)))
# Create a bar plot
p <- ggplot(data = NULL, aes(x = factor(names(response_freq)), y = response_freq)) +
geom_bar(stat = "identity", fill = c("blue", "red")) +
labs(title = paste("Subject", subject_id), x = "Response", y = "Frequency") +
theme_minimal()
# Add the bar plot to the list
bar_plot_list[[length(bar_plot_list) + 1]] <- p
}
bar_plot_pages <- split(bar_plot_list, ceiling(seq_along(bar_plot_list) / plots_per_page))
# Create a list to store the grid pages
grid_pages_list <- lapply(bar_plot_pages, function(page_bar_plots) {
do.call(grid.arrange, c(page_bar_plots, ncol = ncols, nrow = nrows))
})
subject_data <- subset(visual_motion_2afc_fd, subj_idx == subject_id)
subject_id=1
subject_data <- subset(visual_motion_2afc_fd, subj_idx == subject_id)
subject_data
response_freq <- table(as.factor(subject_data$response, levels = c(-1, 1)))
response_freq <- table(factor(subject_data$response, levels = c(-1, 1)))
response_freq
subject_id=2
subject_data <- subset(visual_motion_2afc_fd, subj_idx == subject_id)
response_freq <- table(factor(subject_data$response, levels = c(-1, 1)))
response_freq
# Iterate over unique subjects and create a bar plot for each
for (subject_id in unique(visual_motion_2afc_fd$subj_idx)) {
subject_data <- subset(visual_motion_2afc_fd, subj_idx == subject_id)
response_freq <- table(factor(subject_data$response, levels = c(-1, 1)))
# Create a bar plot
p <- ggplot(data = NULL, aes(x = factor(names(response_freq)), y = response_freq)) +
geom_bar(stat = "identity", fill = c("blue", "red")) +
labs(title = paste("Subject", subject_id), x = "Response", y = "Frequency") +
theme_minimal()
# Add the bar plot to the list
bar_plot_list[[length(bar_plot_list) + 1]] <- p
}
# Create a list to store the bar plots
bar_plot_list <- list()
# Iterate over unique subjects and create a bar plot for each
for (subject_id in unique(visual_motion_2afc_fd$subj_idx)) {
subject_data <- subset(visual_motion_2afc_fd, subj_idx == subject_id)
response_freq <- table(factor(subject_data$response, levels = c(-1, 1)))
# Create a bar plot
p <- ggplot(data = NULL, aes(x = factor(names(response_freq)), y = response_freq)) +
geom_bar(stat = "identity", fill = c("blue", "red")) +
labs(title = paste("Subject", subject_id), x = "Response", y = "Frequency") +
theme_minimal()
# Add the bar plot to the list
bar_plot_list[[length(bar_plot_list) + 1]] <- p
}
bar_plot_pages <- split(bar_plot_list, ceiling(seq_along(bar_plot_list) / plots_per_page))
# Create a list to store the grid pages
grid_pages_list <- lapply(bar_plot_pages, function(page_bar_plots) {
do.call(grid.arrange, c(page_bar_plots, ncol = ncols, nrow = nrows))
})
# Create a list to store the bar plots
bar_plot_list <- list()
for (subject_id in unique(visual_motion_2afc_fd$subj_idx)) {
subject_data <- subset(visual_motion_2afc_fd, subj_idx == subject_id)
response_freq <- table(factor(subject_data$response, levels = c(-1, 1)))
response_freq_df <- as.data.frame(response_freq)  # Convert table to data frame
# Create a bar plot
p <- ggplot(response_freq_df, aes(x = Var1, y = Freq, fill = Var1)) +
geom_bar(stat = "identity") +
labs(title = paste("Subject", subject_id), x = "Response", y = "Frequency") +
theme_minimal()
# Add the bar plot to the list
bar_plot_list[[length(bar_plot_list) + 1]] <- p
}
bar_plot_list
# Split bar plots into pages
bar_plot_pages <- split(bar_plot_list, ceiling(seq_along(bar_plot_list) / plots_per_page))
# Create a list to store the grid pages
grid_pages_list <- lapply(bar_plot_pages, function(page_bar_plots) {
do.call(gridExtra::grid.arrange, c(page_bar_plots, ncol = ncols, nrow = nrows))
})
print(grid_pages_list2[[i]])
library(ggplot2)
library(gridExtra)
visual_motion_2afc_fd$signed_contrast <- visual_motion_2afc_fd$coherence * visual_motion_2afc_fd$stimulus
visual_motion_2afc_fd$response <- ifelse(visual_motion_2afc_fd$response == 0, -1, 1)
visual_motion_2afc_fd$rt <- round(visual_motion_2afc_fd$rt, 5)
visual_motion_2afc_fd$stimrepeat <- ifelse(visual_motion_2afc_fd$stimulus == lag(visual_motion_2afc_fd$prevstim), 1, 0)
visual_motion_2afc_fd$Repeat <- ifelse(visual_motion_2afc_fd$response == lag(visual_motion_2afc_fd$prevresp), 1, 0)
# RT dist
plot_list <- list()
for (subject_id in unique(visual_motion_2afc_fd$subj_idx)) {
subject_data <- subset(visual_motion_2afc_fd, subj_idx == subject_id)
p <- ggplot(subject_data, aes(x = rt)) +
geom_histogram(binwidth = 0.1, fill = "skyblue", color = "black") +
labs(title = paste("Subject", subject_id), x = "RT", y = "Frequency") +
theme_minimal()
plot_list[[length(plot_list) + 1]] <- p
}
ncols <- 2
nrows <- 3
plots_per_page <- ncols * nrows
plot_pages <- split(plot_list, ceiling(seq_along(plot_list) / plots_per_page))
grid_pages_list <- lapply(plot_pages, function(page_plots) {
do.call(grid.arrange, c(page_plots, ncol = ncols, nrow = nrows))
})
for (i in seq_along(grid_pages_list)) {
cat(sprintf("Page %d\n", i))
print(grid_pages_list[[i]])
cat("\n")
}
#Response dist
library(ggplot2)
library(gridExtra)
# Assuming elife_data is your data frame with columns subject and response (binary: 0 for left, 1 for right)
# Create a list to store the bar plots
bar_plot_list <- list()
for (subject_id in unique(visual_motion_2afc_fd$subj_idx)) {
subject_data <- subset(visual_motion_2afc_fd, subj_idx == subject_id)
response_freq <- table(factor(subject_data$response, levels = c(-1, 1)))
response_freq_df <- as.data.frame(response_freq)  # Convert table to data frame
# Create a bar plot
p <- ggplot(response_freq_df, aes(x = Var1, y = Freq, fill = Var1)) +
geom_bar(stat = "identity") +
labs(title = paste("Subject", subject_id), x = "Response", y = "Frequency") +
theme_minimal()
# Add the bar plot to the list
bar_plot_list[[length(bar_plot_list) + 1]] <- p
}
# Split bar plots into pages
bar_plot_pages <- split(bar_plot_list, ceiling(seq_along(bar_plot_list) / plots_per_page))
# Create a list to store the grid pages
grid_pages_list2 <- lapply(bar_plot_pages, function(page_bar_plots) {
do.call(gridExtra::grid.arrange, c(page_bar_plots, ncol = ncols, nrow = nrows))
})
# Display each page
for (i in seq_along(grid_pages_list2)) {
cat(sprintf("Page %d\n", i))
print(grid_pages_list2[[i]])
cat("\n")
}
bar_plot_list <- list()
for (subject_id in unique(visual_motion_2afc_fd$subj_idx)) {
subject_data <- subset(visual_motion_2afc_fd, subj_idx == subject_id)
response_freq <- table(factor(subject_data$response, levels = c(-1, 1)))
response_freq_df <- as.data.frame(response_freq)  # Convert table to data frame
# Create a bar plot
p <- ggplot(response_freq_df, aes(x = Var1, y = Freq, fill = Var1)) +
geom_bar(stat = "identity") +
labs(title = paste("Subject", subject_id), x = "Response", y = "Frequency") +
theme_minimal()
# Add the bar plot to the list
bar_plot_list[[length(bar_plot_list) + 1]] <- p
}
# Split bar plots into pages
bar_plot_pages <- split(bar_plot_list, ceiling(seq_along(bar_plot_list) / plots_per_page))
# Create a list to store the grid pages
grid_pages_list2 <- lapply(bar_plot_pages, function(page_bar_plots) {
do.call(gridExtra::grid.arrange, c(page_bar_plots, ncol = ncols, nrow = nrows))
})
visual_motion_2afc_fd <- read_csv("data/visual_motion_2afc_fd.csv")
visual_motion_2afc_fd$signed_contrast <- visual_motion_2afc_fd$coherence * visual_motion_2afc_fd$stimulus
visual_motion_2afc_fd$response <- ifelse(visual_motion_2afc_fd$response == 0, -1, 1)
visual_motion_2afc_fd$rt <- round(visual_motion_2afc_fd$rt, 5)
visual_motion_2afc_fd$stimrepeat <- ifelse(visual_motion_2afc_fd$stimulus == lag(visual_motion_2afc_fd$prevstim), 1, 0)
visual_motion_2afc_fd$Repeat <- ifelse(visual_motion_2afc_fd$response == lag(visual_motion_2afc_fd$prevresp), 1, 0)
# RT dist
plot_list <- list()
for (subject_id in unique(visual_motion_2afc_fd$subj_idx)) {
subject_data <- subset(visual_motion_2afc_fd, subj_idx == subject_id)
p <- ggplot(subject_data, aes(x = rt)) +
geom_histogram(binwidth = 0.1, fill = "skyblue", color = "black") +
labs(title = paste("Subject", subject_id), x = "RT", y = "Frequency") +
theme_minimal()
plot_list[[length(plot_list) + 1]] <- p
}
ncols <- 2
nrows <- 3
plots_per_page <- ncols * nrows
plot_pages <- split(plot_list, ceiling(seq_along(plot_list) / plots_per_page))
grid_pages_list <- lapply(plot_pages, function(page_plots) {
do.call(grid.arrange, c(page_plots, ncol = ncols, nrow = nrows))
})
for (i in seq_along(grid_pages_list)) {
cat(sprintf("Page %d\n", i))
print(grid_pages_list[[i]])
cat("\n")
}
#Response dist
bar_plot_list <- list()
for (subject_id in unique(visual_motion_2afc_fd$subj_idx)) {
subject_data <- subset(visual_motion_2afc_fd, subj_idx == subject_id)
response_freq <- table(factor(subject_data$response, levels = c(-1, 1)))
response_freq_df <- as.data.frame(response_freq)  # Convert table to data frame
# Create a bar plot
p <- ggplot(response_freq_df, aes(x = Var1, y = Freq, fill = Var1)) +
geom_bar(stat = "identity") +
labs(title = paste("Subject", subject_id), x = "Response", y = "Frequency") +
theme_minimal()
# Add the bar plot to the list
bar_plot_list[[length(bar_plot_list) + 1]] <- p
}
# Split bar plots into pages
bar_plot_pages <- split(bar_plot_list, ceiling(seq_along(bar_plot_list) / plots_per_page))
# Create a list to store the grid pages
grid_pages_list2 <- lapply(bar_plot_pages, function(page_bar_plots) {
do.call(gridExtra::grid.arrange, c(page_bar_plots, ncol = ncols, nrow = nrows))
})
# Display each page
for (i in seq_along(grid_pages_list2)) {
cat(sprintf("Page %d\n", i))
print(grid_pages_list2[[i]])
cat("\n")
}
visual_motion_2afc_fd$accuracy <- ifelse(visual_motion_2afc_fd$response == visual_motion_2afc_fd$stimulus,1,0)
library(readr)
library(ggplot2)
library(gridExtra)
visual_motion_2afc_fd <- read_csv("data/visual_motion_2afc_fd.csv")
visual_motion_2afc_fd$signed_contrast <- visual_motion_2afc_fd$coherence * visual_motion_2afc_fd$stimulus
visual_motion_2afc_fd$response <- ifelse(visual_motion_2afc_fd$response == 0, -1, 1)
visual_motion_2afc_fd$accuracy <- ifelse(visual_motion_2afc_fd$response == visual_motion_2afc_fd$stimulus,1,0)
visual_motion_2afc_fd$rt <- round(visual_motion_2afc_fd$rt, 5)
visual_motion_2afc_fd$stimrepeat <- ifelse(visual_motion_2afc_fd$stimulus == lag(visual_motion_2afc_fd$prevstim), 1, 0)
visual_motion_2afc_fd$Repeat <- ifelse(visual_motion_2afc_fd$response == lag(visual_motion_2afc_fd$prevresp), 1, 0)
# RT dist
plot_list <- list()
for (subject_id in unique(visual_motion_2afc_fd$subj_idx)) {
subject_data <- subset(visual_motion_2afc_fd, subj_idx == subject_id)
p <- ggplot(subject_data, aes(x = rt)) +
geom_histogram(binwidth = 0.1, fill = "skyblue", color = "black") +
labs(title = paste("Subject", subject_id), x = "RT", y = "Frequency") +
theme_minimal()
plot_list[[length(plot_list) + 1]] <- p
}
ncols <- 2
nrows <- 3
plots_per_page <- ncols * nrows
plot_pages <- split(plot_list, ceiling(seq_along(plot_list) / plots_per_page))
grid_pages_list <- lapply(plot_pages, function(page_plots) {
do.call(grid.arrange, c(page_plots, ncol = ncols, nrow = nrows))
})
for (i in seq_along(grid_pages_list)) {
cat(sprintf("Page %d\n", i))
print(grid_pages_list[[i]])
cat("\n")
}
#Response dist
bar_plot_list <- list()
for (subject_id in unique(visual_motion_2afc_fd$subj_idx)) {
subject_data <- subset(visual_motion_2afc_fd, subj_idx == subject_id)
response_freq <- table(factor(subject_data$accuracy, levels = c(-1, 1)))
response_freq_df <- as.data.frame(response_freq)  # Convert table to data frame
# Create a bar plot
p <- ggplot(response_freq_df, aes(x = Var1, y = Freq, fill = Var1)) +
geom_bar(stat = "identity") +
labs(title = paste("Subject", subject_id), x = "Response", y = "Frequency") +
theme_minimal()
# Add the bar plot to the list
bar_plot_list[[length(bar_plot_list) + 1]] <- p
}
# Split bar plots into pages
bar_plot_pages <- split(bar_plot_list, ceiling(seq_along(bar_plot_list) / plots_per_page))
# Create a list to store the grid pages
grid_pages_list2 <- lapply(bar_plot_pages, function(page_bar_plots) {
do.call(gridExtra::grid.arrange, c(page_bar_plots, ncol = ncols, nrow = nrows))
})
# Display each page
for (i in seq_along(grid_pages_list2)) {
cat(sprintf("Page %d\n", i))
print(grid_pages_list2[[i]])
cat("\n")
}
bar_plot_list <- list()
for (subject_id in unique(visual_motion_2afc_fd$subj_idx)) {
subject_data <- subset(visual_motion_2afc_fd, subj_idx == subject_id)
response_freq <- table(factor(subject_data$accuracy, levels = c(0, 1)))
response_freq_df <- as.data.frame(response_freq)  # Convert table to data frame
# Create a bar plot
p <- ggplot(response_freq_df, aes(x = Var1, y = Freq, fill = Var1)) +
geom_bar(stat = "identity") +
labs(title = paste("Subject", subject_id), x = "Response", y = "Frequency") +
theme_minimal()
# Add the bar plot to the list
bar_plot_list[[length(bar_plot_list) + 1]] <- p
}
# Split bar plots into pages
bar_plot_pages <- split(bar_plot_list, ceiling(seq_along(bar_plot_list) / plots_per_page))
# Create a list to store the grid pages
grid_pages_list2 <- lapply(bar_plot_pages, function(page_bar_plots) {
do.call(gridExtra::grid.arrange, c(page_bar_plots, ncol = ncols, nrow = nrows))
})
# Display each page
for (i in seq_along(grid_pages_list2)) {
cat(sprintf("Page %d\n", i))
print(grid_pages_list2[[i]])
cat("\n")
}
